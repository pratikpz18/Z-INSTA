[{"C:\\pratik web\\ping\\frontend\\src\\index.js":"1","C:\\pratik web\\ping\\frontend\\src\\App.js":"2","C:\\pratik web\\ping\\frontend\\src\\reportWebVitals.js":"3","C:\\pratik web\\ping\\frontend\\src\\components\\Dashboard.js":"4","C:\\pratik web\\ping\\frontend\\src\\components\\Login.js":"5","C:\\pratik web\\ping\\frontend\\src\\components\\Landing.js":"6","C:\\pratik web\\ping\\frontend\\src\\components\\Profile.js":"7","C:\\pratik web\\ping\\frontend\\src\\components\\Registration.js":"8","C:\\pratik web\\ping\\frontend\\src\\services\\LoginService.js":"9","C:\\pratik web\\ping\\frontend\\src\\services\\userservice.js":"10","C:\\pratik web\\ping\\frontend\\src\\services\\RegistrationService.js":"11","C:\\pratik web\\ping\\frontend\\src\\elements\\Message.js":"12","C:\\pratik web\\ping\\frontend\\src\\elements\\Error.js":"13","C:\\pratik web\\ping\\frontend\\src\\services\\auth-header.js":"14","C:\\pratik web\\ping\\frontend\\src\\services\\SearchService.js":"15","C:\\pratik web\\ping\\frontend\\src\\components\\SearchModal.js":"16","C:\\pratik web\\ping\\frontend\\src\\components\\Messages.js":"17","C:\\pratik web\\ping\\frontend\\src\\services\\messageservice.js":"18","C:\\pratik web\\ping\\frontend\\src\\components\\EditProfile.js":"19"},{"size":520,"mtime":1616665479986,"results":"20","hashOfConfig":"21"},{"size":1285,"mtime":1616418039399,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":3015,"mtime":1616666889927,"results":"24","hashOfConfig":"21"},{"size":5676,"mtime":1616670391164,"results":"25","hashOfConfig":"21"},{"size":1914,"mtime":1616666862905,"results":"26","hashOfConfig":"21"},{"size":8475,"mtime":1616694655798,"results":"27","hashOfConfig":"21"},{"size":7565,"mtime":1616670336353,"results":"28","hashOfConfig":"21"},{"size":165,"mtime":1612859625114,"results":"29","hashOfConfig":"21"},{"size":896,"mtime":1616656045220,"results":"30","hashOfConfig":"21"},{"size":177,"mtime":1612509859912,"results":"31","hashOfConfig":"21"},{"size":159,"mtime":1612505603139,"results":"32","hashOfConfig":"21"},{"size":154,"mtime":1612505611218,"results":"33","hashOfConfig":"21"},{"size":234,"mtime":1612797974278,"results":"34","hashOfConfig":"21"},{"size":352,"mtime":1614954786151,"results":"35","hashOfConfig":"21"},{"size":5165,"mtime":1616666801235,"results":"36","hashOfConfig":"21"},{"size":8493,"mtime":1616672233915,"results":"37","hashOfConfig":"21"},{"size":190,"mtime":1615012388350,"results":"38","hashOfConfig":"21"},{"size":5244,"mtime":1616666853504,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"ckqbb4",{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},"C:\\pratik web\\ping\\frontend\\src\\index.js",[],["87","88"],"C:\\pratik web\\ping\\frontend\\src\\App.js",["89","90","91","92","93","94","95"],"import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Landing from './components/Landing';\nimport Login from './components/Login';\nimport Registration from './components/Registration';\nimport Dashboard from './components/Dashboard';\nimport Profile from './components/Profile';\nimport Messages from './components/Messages';\nimport EditProfile from './components/EditProfile'\n\nclass App extends Component {\n  render(){\n    return (\n\n      <Router>\n        <div className=\"App\">\n          <Switch>\n              <Route path=\"/\" component = {Landing} exact />\n              <Route exact path=\"/register\" component={Registration} exact/>\n              <Route exact path=\"/login\" component={Login} exact/>\n              <Route exact path=\"/dashboard\" component={Dashboard} exact/>\n              <Route exact path=\"/dashboard/profile/:userid\" render={(props) => <Profile {...props} />} exact/>\n              <Route exact path=\"/dashboard/Messages\" component={Messages} exact/>\n              <Route exact path=\"/dashboard/editprofile/:userid\" render={(props) => <EditProfile {...props} />}  exact/>\n          </Switch>\n        </div>\n      </Router>\n      \n    );\n  };\n};\n\nexport default App;\n","C:\\pratik web\\ping\\frontend\\src\\reportWebVitals.js",[],"C:\\pratik web\\ping\\frontend\\src\\components\\Dashboard.js",[],"C:\\pratik web\\ping\\frontend\\src\\components\\Login.js",["96","97","98","99"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { Link,Redirect } from 'react-router-dom';\r\nimport { UserLogin } from '../services/LoginService';\r\nimport Message from '../elements/Message';\r\nimport Error from '../elements/Error';\r\n\r\nexport default class Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading : true,\r\n            token:'',\r\n            LoginEmail:'',\r\n            LoginPassword:'',\r\n            login: false,\r\n            error: false,\r\n            LoginError: '',\r\n            fieldError:{}\r\n        };\r\n\r\n        this.onTextboxChangeLoginEmail = this.onTextboxChangeLoginEmail.bind(this);\r\n        this.onTextboxChangeLoginPassword = this.onTextboxChangeLoginPassword.bind(this);\r\n        this.onSignIn = this.onSignIn.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n          isLoading: false\r\n        });\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.setState = (state,callback)=>{\r\n            return;\r\n        };\r\n    }\r\n\r\n    onTextboxChangeLoginEmail(event) {\r\n        this.setState({\r\n            LoginEmail: event.target.value,\r\n        });\r\n    }\r\n\r\n    onTextboxChangeLoginPassword(event) {\r\n        this.setState({\r\n            LoginPassword: event.target.value,\r\n        });\r\n    }\r\n\r\n    async onSignIn() {\r\n        const {\r\n            LoginEmail,\r\n            LoginPassword\r\n        } = this.state;\r\n\r\n        this.setState({\r\n           isLoading: true,\r\n        });\r\n\r\n        this.setState({\r\n            LoginError: '',\r\n            fieldError:{}\r\n        })\r\n\r\n        const data = {\r\n            email:LoginEmail,\r\n            password: LoginPassword,\r\n        };\r\n\r\n        try{\r\n            const LoginStatus =await UserLogin (data);\r\n            console.log(LoginStatus);\r\n            if (LoginStatus.data.token) {\r\n                localStorage.setItem(\"user\", JSON.stringify(LoginStatus.data));\r\n            }\r\n            this.setState ({\r\n                isLoading : false,\r\n                token:'',\r\n                LoginEmail:'',\r\n                LoginPassword:'',\r\n                login: true,\r\n                error: false,\r\n                LoginError: '',\r\n                fieldError:{}\r\n            });\r\n        }\r\n        catch(err){\r\n            console.log(err.response.data.errors)\r\n            if (err.response && err.response.data) {\r\n                if(err.response.data.errors){\r\n                    this.setState({\r\n                        error: true,\r\n                        login: false,\r\n                        isLoading:false,\r\n                        fieldError:err.response.data.errors,\r\n                        LoginEmail:'',\r\n                        LoginPassword:'',\r\n                    });\r\n                }\r\n                else if(err.response.data.msg){\r\n                    this.setState({\r\n                    error: true,\r\n                    login: false,\r\n                    isLoading:false,\r\n                    LoginError: err.response.data.msg,\r\n                    LoginEmail:'',\r\n                    LoginPassword:'',\r\n                }); \r\n            }\r\n        }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        const {\r\n            isLoading,\r\n            token,\r\n            LoginEmail,\r\n            LoginPassword,\r\n            login,\r\n            error,\r\n            LoginError,\r\n            fieldError\r\n        } = this.state;\r\n\r\n        if (isLoading) {\r\n            return (<div><p>Loading...</p></div>);\r\n        }\r\n\r\n\r\n\r\n        return(\r\n            <div className=\"Login\">\r\n                <div className=\"form\">\r\n                    <div className=\"status\">\r\n                        {!login ? <div>{LoginError}</div> : <Redirect  to='/dashboard' />}\r\n                    </div>\r\n                    <h1 className=\"header\">LOGIN</h1>\r\n                    <div>\r\n                        <div className=\"input-group\">\r\n                        <i class=\"fa fa-envelope input-group-addon\" aria-hidden=\"true\"></i>\r\n                        <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className=\"form-control register\"\r\n                        autoComplete=\"Email\"\r\n                        value={LoginEmail}\r\n                        onChange={this.onTextboxChangeLoginEmail}\r\n                        />\r\n                        </div>\r\n                        {fieldError.email && (\r\n                        <div className=\"fieldError\">{fieldError.email}</div>\r\n                        )}\r\n                        <div className=\"input-group\">\r\n                        <i class=\"fa fa-lock input-group-addon\" aria-hidden=\"true\"></i>\r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        className=\"form-control register\"\r\n                        value={LoginPassword}\r\n                        autoComplete=\"password\"\r\n                        onChange={this.onTextboxChangeLoginPassword}\r\n                        />\r\n                        </div>\r\n                        {fieldError.password && (\r\n                        <div className=\"fieldError\">{fieldError.password}</div>\r\n                        )}\r\n                        <div className=\"btn-group\">\r\n                            <button className=\"btn signin-btn\" onClick={this.onSignIn}>Sign In</button>\r\n                            <Link to=\"/register\" className=\"Register-link\"> Register </Link>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\pratik web\\ping\\frontend\\src\\components\\Landing.js",[],"C:\\pratik web\\ping\\frontend\\src\\components\\Profile.js",["100","101","102","103"],"C:\\pratik web\\ping\\frontend\\src\\components\\Registration.js",["104","105","106"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { Link,Redirect } from 'react-router-dom';\r\nimport { UserRegistration } from '../services/RegistrationService';\r\nimport Message from '../elements/Message';\r\nimport Error from '../elements/Error';\r\n\r\nexport default class Registration extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading : true,\r\n            token:'',\r\n            RegistrationUsername:'',\r\n            RegistrationEmail:'',\r\n            RegistrationPassword:'',\r\n            register: false,\r\n            error: false,\r\n            registerError: '',\r\n            fieldError:{}\r\n        };\r\n\r\n        this.onTextboxChangeRegistrationUsername = this.onTextboxChangeRegistrationUsername.bind(this);\r\n        this.onTextboxChangeRegistrationEmail = this.onTextboxChangeRegistrationEmail.bind(this);\r\n        this.onTextboxChangeRegistrationPassword = this.onTextboxChangeRegistrationPassword.bind(this);\r\n        this.onSignUp = this.onSignUp.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n          isLoading: false\r\n        });\r\n    };\r\n\r\n    onTextboxChangeRegistrationUsername(event) {\r\n        this.setState({\r\n            RegistrationUsername: event.target.value,\r\n        });\r\n    }\r\n\r\n    onTextboxChangeRegistrationEmail(event) {\r\n        this.setState({\r\n            RegistrationEmail: event.target.value,\r\n        });\r\n    }\r\n\r\n    onTextboxChangeRegistrationPassword(event) {\r\n        this.setState({\r\n            RegistrationPassword: event.target.value,\r\n        });\r\n    }\r\n\r\n    async onSignUp() {\r\n        const {\r\n            RegistrationUsername,\r\n            RegistrationEmail,\r\n            RegistrationPassword\r\n        } = this.state;\r\n\r\n        this.setState({\r\n           isLoading: true,\r\n        });\r\n\r\n        this.setState({\r\n            registerError: '',\r\n            fieldError:{}\r\n        })\r\n      \r\n\r\n        const data = {\r\n            email:RegistrationEmail,\r\n            username: RegistrationUsername,\r\n            password: RegistrationPassword,\r\n        };\r\n        \r\n        try{\r\n        const registerStatus =await UserRegistration (data);\r\n        console.log(registerStatus);\r\n        this.setState ({\r\n            RegistrationUsername:'',\r\n            RegistrationEmail:'',\r\n            RegistrationPassword:'',\r\n            register: true,\r\n            error: false,\r\n            isLoading:false,\r\n            registerError:'',\r\n            fieldError:{}\r\n        });\r\n        }\r\n        catch(err) {\r\n            console.log(err.response.data.errors)\r\n            if (err.response && err.response.data) {\r\n                if(err.response.data.errors){\r\n                    this.setState({\r\n                        error: true,\r\n                        register: false,\r\n                        isLoading:false,\r\n                        fieldError:err.response.data.errors,\r\n                        RegistrationUsername:'',\r\n                        RegistrationEmail:'',\r\n                        RegistrationPassword:'',\r\n                    });\r\n                }\r\n                else if(err.response.data.msg){\r\n                    this.setState({\r\n                    error: true,\r\n                    register: false,\r\n                    isLoading:false,\r\n                    registerError: err.response.data.msg,\r\n                    RegistrationUsername:'',\r\n                    RegistrationEmail:'',\r\n                    RegistrationPassword:'',\r\n                });\r\n\r\n\r\n        }\r\n        }\r\n   \r\n    }\r\n        \r\n    };\r\n\r\n    \r\n        render() {\r\n\r\n            const {\r\n            isLoading,\r\n            token,\r\n            register,\r\n            error,\r\n            registerError,\r\n            RegistrationUsername,\r\n            RegistrationEmail,\r\n            RegistrationPassword,\r\n            fieldError\r\n            } = this.state;\r\n\r\n            if (isLoading) {\r\n                return (<div><p>Loading...</p></div>);\r\n            }\r\n            \r\n            if (!token) {\r\n                return(\r\n                    <div className=\"Registration\">\r\n                        <div className=\"form\">\r\n                            <div className=\"status\">\r\n                                {!register ? <div>{registerError}</div> : <Redirect  to='/login' />}\r\n                            </div>\r\n                            <div className=\"header\">\r\n                                <h1>REGISTER</h1>\r\n                            </div>\r\n                            <div>\r\n                                <div className=\"input-group\">\r\n                                    <i class=\"fa fa-user input-group-addon\" aria-hidden=\"true\"></i>\r\n                                    <input\r\n                                    type=\"username\"\r\n                                    placeholder=\"Username\"\r\n                                    autoComplete=\"Username\"\r\n                                    className=\"form-control register\"\r\n                                    value={RegistrationUsername}\r\n                                    onChange={this.onTextboxChangeRegistrationUsername}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"input-group\">\r\n                                <i class=\"fa fa-envelope input-group-addon\" aria-hidden=\"true\"></i>\r\n                                    <input\r\n                                    type=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    autoComplete=\"Email\"\r\n                                    className=\"form-control register\"\r\n                                    value={RegistrationEmail}\r\n                                    onChange={this.onTextboxChangeRegistrationEmail}\r\n                                    />\r\n                                </div>\r\n                                {fieldError.email && (\r\n                                    <div className=\"fieldError\">{fieldError.email}</div>\r\n                                    )}\r\n                                <div className=\"input-group\">\r\n                                <i class=\"fa fa-lock input-group-addon\" aria-hidden=\"true\"></i>\r\n                                    <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"form-control register\"\r\n                                    value={RegistrationPassword}\r\n                                    autoComplete=\"password\"\r\n                                    onChange={this.onTextboxChangeRegistrationPassword}\r\n                                    />\r\n                                </div>\r\n                                {fieldError.password && (\r\n                                    <div className=\"fieldError\">{fieldError.password}</div>\r\n                                    )}\r\n                                <div className=\"btn-group\">\r\n                                    <button className=\"btn signup-btn\" onClick={this.onSignUp}>Sign Up</button>\r\n                                    <Link className=\"Login-link\" to=\"/login\"> Login </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                  <p>Signed in</p>\r\n                </div>\r\n              );\r\n        }\r\n\r\n};","C:\\pratik web\\ping\\frontend\\src\\services\\LoginService.js",[],"C:\\pratik web\\ping\\frontend\\src\\services\\userservice.js",["107"],"import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:4000/users/';\r\n\r\nclass UserService {\r\n  getUser(value) {\r\n    return axios.get(`http://localhost:4000/users/dashboard/search/${value}`)\r\n                .then(res=> res.data)\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n\r\n  getUserById(userid){\r\n    return axios.get(`http://localhost:4000/users/dashboard/profile/${userid}`)\r\n                .then(res=>res.data)\r\n  }\r\n  \r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  update(userid,data){\r\n    return axios.put(`http://localhost:4000/users/dashboard/editprofile/${userid}`,data)\r\n                .then(res=>res.data)\r\n  }\r\n\r\n  getallUsers(userid){\r\n    return axios.get(`http://localhost:4000/users/dashboard/profile/allusers/${userid}`)\r\n                .then(res=>res.data)\r\n  }\r\n}\r\n\r\nexport default new UserService();","C:\\pratik web\\ping\\frontend\\src\\services\\RegistrationService.js",[],"C:\\pratik web\\ping\\frontend\\src\\elements\\Message.js",[],"C:\\pratik web\\ping\\frontend\\src\\elements\\Error.js",[],"C:\\pratik web\\ping\\frontend\\src\\services\\auth-header.js",[],["108","109"],"C:\\pratik web\\ping\\frontend\\src\\services\\SearchService.js",[],"C:\\pratik web\\ping\\frontend\\src\\components\\SearchModal.js",["110","111","112"],"import React, { Component } from 'react';\r\nimport '../App.css'\r\nimport { Link } from 'react-router-dom';\r\nimport { AddFreind, SearchUser } from '../services/SearchService';\r\nimport UserService from \"../services/userservice\";\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nclass SearchModal extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        show: false,\r\n        search: '',\r\n        userdetails:[],\r\n        active_id: null,\r\n        requestedIds: {},\r\n        \r\n    }\r\n\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.onTextboxChangeSearch = this.onTextboxChangeSearch.bind(this);\r\n}\r\n\r\nhandleShow() {\r\n    this.setState({ show: true })\r\n}\r\n\r\nhandleClose(){\r\n    this.setState({ show: false,search:'' })\r\n}\r\n\r\nonTextboxChangeSearch(event) {\r\n  const { value } = event.target;\r\n  this.setState({\r\n    search: value // <-- (1) update state\r\n  });\r\n}\r\n\r\nSearchForUser = async () => { // <-- (3) refactored search function\r\n  const { search, userdetails } = this.state;\r\n  const data = { username: search };\r\n\r\n  const  user  = await SearchUser(data);\r\n  this.setState({ userdetails: user.user });\r\n}\r\n\r\ncomponentDidUpdate(prevProps, prevState) {\r\n  if (prevState.search !== this.state.search) {\r\n    this.SearchForUser(); // <-- (2) search state updated, do search for user\r\n  }\r\n}\r\n\r\nasync handleFreindRequest(elementid){\r\n  const {currentUser} = this.props;\r\n  const curid = currentUser.user._id ;\r\n  console.log(curid)\r\n  const fid = elementid;\r\n  this.setState(prevState =>({ \r\n    active_id: prevState.active_id === fid ? null : fid, // toggle active id\r\n    requestedIds: {\r\n      ...prevState.requestedIds,\r\n      [fid]: fid, // add requested id\r\n    },\r\n  }))\r\n  console.log(fid)\r\n  const data = { \r\n    id: curid,\r\n    fid:fid\r\n  }\r\n  if((JSON.parse(localStorage.getItem('user')).user.friendsList.some(item => item == elementid))){\r\n    console.log(data.fid,elementid)\r\n    return\r\n  }else{\r\n    const AddingFriendtoList = await AddFreind(data);\r\n    console.log(AddingFriendtoList);\r\n    const userdata = await UserService.getUser(curid);\r\n    console.log(userdata);\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    console.log(user.user.friendsList.push(fid));\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }\r\n}\r\n\r\n\r\nrender() {\r\n    let {search,userdetails}= this.state;\r\n    const {currentUser} = this.props;\r\n    return (\r\n       <div>\r\n          <Modal show={this.state.show} onHide={this.handleClose} dialogClassName=\"modal-container\">\r\n             <Modal.Header closeButton>\r\n               <Modal.Title>\r\n                 <input \r\n                  type=\"text\" \r\n                  placeholder=\"Search...\"\r\n                  className=\"form-control\"\r\n                  value={search}\r\n                  onChange={this.onTextboxChangeSearch}\r\n                 ></input>\r\n               </Modal.Title>\r\n             </Modal.Header>\r\n             <Modal.Body >\r\n               <h3>Users</h3>\r\n               <div>\r\n                <ul className=\"list-group\">\r\n                  {userdetails.map((element) => {\r\n                    if(currentUser.user.username !== element.username){\r\n                      if((JSON.parse(localStorage.getItem('user')).user.friendsList.some(item => item == element._id))){\r\n                        return(\r\n                        <div key={element._id} className=\"user-list\">\r\n                          <li className=\"list-group-item\"><Link to={`/dashboard/profile/:${element._id}`}>{element.username}</Link><input id={element._id} type=\"button\" className=\"list-group-btn\" value=\"Friends\" style = {{backgroundColor:\"#17a2b8\"}}></input></li>\r\n                        </div>\r\n                        )\r\n                      }else{\r\n                        return(\r\n                          <div key={element._id} className=\"user-list\">\r\n                            <li className=\"list-group-item\"><Link to={`/dashboard/profile/:${element._id}`}>{element.username}</Link><input \r\n                            type=\"button\" \r\n                            id={element._id} \r\n                            className=\"list-group-btn\"\r\n                            onClick={this.handleFreindRequest.bind(this,element._id )} \r\n                            value={this.state.requestedIds[element._id] ? 'Friends' : 'Add Friend'}\r\n                            style = {{backgroundColor: ( element._id === this.state.active_id ?  '#17a2b8' : \"gray\")}}></input></li>\r\n                          </div>\r\n                        );\r\n                      }\r\n                    }\r\n                    else{\r\n                      return(\r\n                        <div key={element._id} className=\"user-list\">\r\n                          <li className=\"list-group-item\"><Link to={`/dashboard/profile/:${element._id}`}>{element.username}</Link></li>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  })}\r\n                </ul>\r\n               </div>\r\n             </Modal.Body>\r\n          </Modal>\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default SearchModal;","C:\\pratik web\\ping\\frontend\\src\\components\\Messages.js",["113","114","115","116"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { Link,Redirect } from 'react-router-dom';\r\nimport UserService from \"../services/userservice\";\r\nimport {getUsersFriend} from \"../services/messageservice\";\r\nimport io from \"socket.io-client\";\r\nconst SOCKET_IO_URL = \"http://localhost:4000\";\r\n\r\nexport default class Messages extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.socket = io(SOCKET_IO_URL)\r\n        this.state = {\r\n            currentUser: UserService.getCurrentUser(),\r\n            isLoading:false,\r\n            userdetails:[],\r\n            show:false,\r\n            username:'',\r\n            message:'',\r\n            senderusername:'',\r\n            socketConnected:false,\r\n            messages:[]\r\n        };\r\n        this.onTextboxChangeMessage = this.onTextboxChangeMessage.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {currentUser}=this.state\r\n        this.fetchUser()\r\n        this.socket.on('connect',()=> {\r\n            this.setState({ socketConnected : true})\r\n            this.socket.on('sended',(data)=>{ \r\n                console.log('component did mount',data)\r\n                console.log(this.state.username==data.sendername)\r\n                // if(this.state.username==data.username){\r\n                    console.log(this.state.username,data.username,data.senderusername)\r\n                    this.setState({messages:[...this.state.messages,data]})\r\n                    console.log(this.state.messages)\r\n                // }\r\n                \r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    async fetchUser(){\r\n        try{\r\n            const {currentUser} = this.state\r\n            console.log(currentUser)\r\n            const data = { userid : currentUser.user._id }\r\n            console.log(data)\r\n            let user = await getUsersFriend(data)\r\n            this.setState({ userdetails: user });\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    showMessageSpace(elementusername){\r\n        this.setState({\r\n            show: true,\r\n            username:elementusername\r\n        });\r\n        console.log(this.socket.id)\r\n        this.socket.emit('send',{username:elementusername });\r\n    }\r\n\r\n    onTextboxChangeMessage(e){\r\n        this.setState({ message:e.target.value})\r\n    }\r\n\r\n    SendMessage(username,message,senderusername){\r\n        const {messages} =this.state\r\n        if(this.state.socketConnected){\r\n            console.log('if condition test',username,message,senderusername )\r\n            console.log('condition username',`${username}`,  )\r\n            console.log(this.socket.id)\r\n            this.socket.emit('sended',{username,message,senderusername });\r\n        }\r\n        this.setState( { message:'' })\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        const { currentUser ,isLoading,userdetails,message,messages} = this.state;\r\n        console.log(messages)\r\n        console.log(userdetails.message)\r\n        if (isLoading) {\r\n            return (<div><p>Loading...</p></div>);\r\n        }\r\n\r\n        if(!currentUser){\r\n            return(\r\n                <div>\r\n                    <Redirect  to='/login' />\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n        return(\r\n            <div className=\"message-container\">\r\n                <div>\r\n                    <div className=\"navbar navbar-inverse\">\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"navbar-header\">\r\n                                <Link to=\"/dashboard\" className=\"logo-link\">Ping</Link>\r\n                            </div>\r\n                            <div>\r\n                                <Link className=\"link\" to={`/dashboard/profile/:${currentUser.user._id}`}>Profile</Link>\r\n                            </div>\r\n                            <div>\r\n                                <Link className=\"link\" to=\"/login\" onClick={this.logOut}><i class=\"fa fa-sign-out\" aria-hidden=\"true\"></i>LogOut</Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <h1 className=\"header\">Message Space</h1>\r\n                <div className=\"user-messages-container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"users-list col-xs-6\">\r\n                            <p className=\"friends\">Friends</p>\r\n                            {userdetails.message!=\"error\" &&\r\n                                <ul className=\"list-group\">\r\n                                    {userdetails?.map((element) => {\r\n                                        return(\r\n                                            <div key={element._id} className=\"list-group-div\">\r\n                                                <li className=\"list-group-item list-group-username\"><Link to={`/dashboard/profile/:${element._id}`}>{element.username}</Link>{' '}<input \r\n                                                type=\"button\" \r\n                                                id={element._id}\r\n                                                value=\"Message\"\r\n                                                className=\"message-btn\"\r\n                                                onClick={this.showMessageSpace.bind(this,element.username)} ></input></li>\r\n                                            </div>\r\n                                        );\r\n                                    })\r\n                                    }\r\n                                </ul>\r\n                            }\r\n                        </div>\r\n                        <div className=\"message-space-div col-xs-8\">\r\n                {\r\n                    this.state.show &&\r\n                    (<div className=\"message-space\">\r\n                        <h3 className=\"header-sendername\">sending message to : <strong className=\"sendername\">{this.state.username}</strong></h3>\r\n                        {' '}\r\n                        <div>\r\n                            <div>\r\n                                <ul>\r\n                                {messages.length > 0 && messages.map((msg,key) =>{\r\n                                    return(\r\n                                    <div>\r\n                                        <strong className=\"sendername\"\r\n                                        style ={{marginLeft:(this.state.username === msg.senderusername ? '0' : '2vw'),\r\n                                                marginRight:(this.state.username === msg.senderusername ? '60vw' : '0')}}>{msg.senderusername}</strong>\r\n                                        <li \r\n                                        key={key}\r\n                                        className=\"list-group-item message-li\"\r\n                                        style = {{backgroundColor: ( this.state.username === msg.senderusername ?  'lightgray' : \"lightgreen\"),\r\n                                                textAlign:(this.state.username === msg.senderusername ? 'left' : 'right'),\r\n                                                marginLeft:(this.state.username === msg.senderusername ? '0' : '30vw')}}\r\n                                        >\r\n                                        <span>{' '}{msg.message}</span>\r\n                                        </li>\r\n                                    </div>\r\n                                    );\r\n                                })\r\n                                }\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        {' '}\r\n                        <div>\r\n                            {' '}\r\n                            <input \r\n                            type=\"text\"\r\n                            name=\"message\"\r\n                            className=\"send-input form-control-warning\"\r\n                            value={message}\r\n                            onChange={this.onTextboxChangeMessage}\r\n                            ></input>\r\n                            <button className='send-btn btn-info' onClick={this.SendMessage.bind(this,this.state.username,this.state.message,currentUser.user.username )}><i class=\"fa fa-paper-plane\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                        {' '}\r\n                    </div>)\r\n                    }\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}","C:\\pratik web\\ping\\frontend\\src\\services\\messageservice.js",[],"C:\\pratik web\\ping\\frontend\\src\\components\\EditProfile.js",["117","118","119"],"import React, { Component } from 'react';\r\nimport '../App.css' ;\r\nimport { Link,Redirect } from 'react-router-dom';\r\nimport UserService from \"../services/userservice\";\r\n\r\nexport default class EditProfile extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentUser:[],\r\n            UpdateUser:[],\r\n            isLoading:false,\r\n            username:UserService.getCurrentUser().user.username,\r\n            bio:UserService.getCurrentUser().user.bio,\r\n            update:false\r\n        };\r\n        this.logOut = this.logOut.bind(this);\r\n        this.updateuser = this.updateuser.bind(this);\r\n        this.onTextboxChangeUsername = this.onTextboxChangeUsername.bind(this);\r\n        this.onTextboxChangeBio = this.onTextboxChangeBio.bind(this);\r\n    }\r\n\r\n    logOut() {\r\n        UserService.logout()\r\n    } \r\n\r\n    onTextboxChangeUsername(event) {\r\n        let newvalue=event.target.value\r\n        this.setState({\r\n            username: newvalue,\r\n        });\r\n    }\r\n\r\n    onTextboxChangeBio(event) {\r\n        let newbiovalue=event.target.value\r\n        this.setState({\r\n            bio: newbiovalue,\r\n        });\r\n    }\r\n\r\n    componentWillMount(){\r\n        let userid = this.props.match.params.userid;\r\n        userid=userid.slice(1)\r\n        console.log('First this called');\r\n        this.fetchUser(userid)\r\n    }\r\n\r\n    async fetchUser(userid){\r\n        try{\r\n            console.log(userid)\r\n            let user = await UserService.getUserById(userid)\r\n            this.setState({ currentUser:user})\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n\r\n    async updateuser(){\r\n        let data = {\r\n            username:this.state.username,\r\n            bio:this.state.bio\r\n        }\r\n        try{\r\n            let userid = this.props.match.params.userid;\r\n            userid=userid.slice(1)\r\n            console.log(userid)\r\n            let updateuser = await UserService.update(userid,data)\r\n            this.setState({ \r\n                UpdateUser:updateuser,\r\n                update:true\r\n            })\r\n            this.setState({\r\n                bio:this.state.UpdateUser.user.bio\r\n            })\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { currentUser ,isLoading,bio,username,UpdateUser,update } = this.state;\r\n        \r\n\r\n        if (isLoading) {\r\n            return (<div><p>Loading...</p></div>);\r\n        }\r\n\r\n        if(!currentUser){\r\n            return(\r\n                <div>\r\n                    <Redirect  to='/login' />\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"editprofile\">\r\n                    <div className=\"navbar profile-nav\">\r\n                        <div className=\"navbar-nav profile-navbar-nav\">\r\n                            <div className=\"navbar-item profile-navbar-item \">\r\n                                <Link to=\"/dashboard\" className=\"logo-link Profile-logo-link \">Dashboard</Link>\r\n                            </div>\r\n                            <div className=\"navbar-item profile-navbar-item\">\r\n                                <Link className=\"link\" to=\"/login\" onClick={this.logOut}><i class=\"fa fa-sign-out logout-btn\" aria-hidden=\"true\">LogOut</i></Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"editprofile-container\"> \r\n                        <h1 className=\"header\"> Edit Profile</h1>\r\n                        <div className=\"editprofile-body\">\r\n                            <div className=\"input-group\" >\r\n                                <label className=\"label\">Username:</label>\r\n                                <input \r\n                                className=\"form-control editprofile-input\"\r\n                                type=\"text\"\r\n                                value={this.state.username}\r\n                                onChange={this.onTextboxChangeUsername}>\r\n                                </input>\r\n                            </div>\r\n                            <div className=\"input-group\" >\r\n                                <label className=\"label\">Bio:</label>\r\n                                <input \r\n                                className=\"form-control editprofile-input\"\r\n                                type=\"text\"\r\n                                value={this.state.bio}\r\n                                onChange={this.onTextboxChangeBio}\r\n                                ></input>\r\n                            </div>\r\n                            <div className=\"button-group\">\r\n                                <button className=\"btn-danger cancel-btn\"><Link className=\"cancel-link\" to={`/dashboard/profile/:${currentUser._id}`}>Cancel</Link></button>\r\n                                <button className=\"btn-primary update-btn\" onClick={this.updateuser}>Update</button>\r\n                            </div>\r\n                            {!update ? <div></div> : <Redirect  to={`/dashboard/profile/:${currentUser._id}`} />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":2,"column":42,"nodeType":"126","messageId":"127","endLine":2,"endColumn":50},{"ruleId":"128","severity":1,"message":"129","line":20,"column":70,"nodeType":"130","endLine":20,"endColumn":75},{"ruleId":"128","severity":1,"message":"129","line":21,"column":60,"nodeType":"130","endLine":21,"endColumn":65},{"ruleId":"128","severity":1,"message":"129","line":22,"column":68,"nodeType":"130","endLine":22,"endColumn":73},{"ruleId":"128","severity":1,"message":"129","line":23,"column":105,"nodeType":"130","endLine":23,"endColumn":110},{"ruleId":"128","severity":1,"message":"129","line":24,"column":76,"nodeType":"130","endLine":24,"endColumn":81},{"ruleId":"128","severity":1,"message":"129","line":25,"column":114,"nodeType":"130","endLine":25,"endColumn":119},{"ruleId":"124","severity":1,"message":"131","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":15},{"ruleId":"124","severity":1,"message":"132","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":13},{"ruleId":"124","severity":1,"message":"133","line":123,"column":13,"nodeType":"126","messageId":"127","endLine":123,"endColumn":18},{"ruleId":"124","severity":1,"message":"134","line":127,"column":13,"nodeType":"126","messageId":"127","endLine":127,"endColumn":18},{"ruleId":"135","severity":1,"message":"136","line":85,"column":89,"nodeType":"137","messageId":"138","endLine":85,"endColumn":91},{"ruleId":"135","severity":1,"message":"136","line":159,"column":42,"nodeType":"137","messageId":"138","endLine":159,"endColumn":44},{"ruleId":"135","severity":1,"message":"136","line":169,"column":109,"nodeType":"137","messageId":"138","endLine":169,"endColumn":111},{"ruleId":"135","severity":1,"message":"136","line":170,"column":122,"nodeType":"137","messageId":"138","endLine":170,"endColumn":124},{"ruleId":"124","severity":1,"message":"131","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":15},{"ruleId":"124","severity":1,"message":"132","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":13},{"ruleId":"124","severity":1,"message":"134","line":131,"column":13,"nodeType":"126","messageId":"127","endLine":131,"endColumn":18},{"ruleId":"124","severity":1,"message":"139","line":3,"column":7,"nodeType":"126","messageId":"127","endLine":3,"endColumn":14},{"ruleId":"120","replacedBy":"140"},{"ruleId":"122","replacedBy":"141"},{"ruleId":"124","severity":1,"message":"142","line":41,"column":19,"nodeType":"126","messageId":"127","endLine":41,"endColumn":30},{"ruleId":"135","severity":1,"message":"136","line":71,"column":83,"nodeType":"137","messageId":"138","endLine":71,"endColumn":85},{"ruleId":"135","severity":1,"message":"136","line":109,"column":103,"nodeType":"137","messageId":"138","endLine":109,"endColumn":105},{"ruleId":"124","severity":1,"message":"143","line":28,"column":16,"nodeType":"126","messageId":"127","endLine":28,"endColumn":27},{"ruleId":"135","severity":1,"message":"136","line":34,"column":48,"nodeType":"137","messageId":"138","endLine":34,"endColumn":50},{"ruleId":"124","severity":1,"message":"144","line":73,"column":16,"nodeType":"126","messageId":"127","endLine":73,"endColumn":24},{"ruleId":"135","severity":1,"message":"145","line":123,"column":49,"nodeType":"137","messageId":"138","endLine":123,"endColumn":51},{"ruleId":"124","severity":1,"message":"146","line":83,"column":40,"nodeType":"126","messageId":"127","endLine":83,"endColumn":43},{"ruleId":"124","severity":1,"message":"147","line":83,"column":44,"nodeType":"126","messageId":"127","endLine":83,"endColumn":52},{"ruleId":"124","severity":1,"message":"148","line":83,"column":53,"nodeType":"126","messageId":"127","endLine":83,"endColumn":63},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Message' is defined but never used.","'Error' is defined but never used.","'token' is assigned a value but never used.","'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'API_URL' is assigned a value but never used.",["149"],["150"],"'userdetails' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'messages' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'bio' is assigned a value but never used.","'username' is assigned a value but never used.","'UpdateUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]